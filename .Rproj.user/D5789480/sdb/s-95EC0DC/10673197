{
    "collab_server" : "",
    "contents" : "\n# __________________________________________________________\n# //////////////////////////////////////////////////////////\n#\n#    MODULE 1 - STATISTICAL SEGMENTATION\n# __________________________________________________________\n# //////////////////////////////////////////////////////////\n\n\n# --- COMPUTING RECENCY, FREQUENCY, MONETARY VALUE ---------\n\n\n# Load text file into local variable called 'data'\ndata = read.delim(file = 'purchases.txt', header = FALSE, sep = '\\t', dec = '.')\n\n# Add headers and interpret the last column as a date, extract year of purchase\ncolnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')\ndata$date_of_purchase = as.Date(data$date_of_purchase, \"%Y-%m-%d\")\ndata$days_since       = as.numeric(difftime(time1 = \"2016-01-01\",\n                                            time2 = data$date_of_purchase,\n                                            units = \"days\"))\n\n# Display the data after transformation\nhead(data)\nsummary(data)\n\n# Compute key marketing indicators using SQL language\n#install.packages(\"sqldf\")\nlibrary(sqldf)\n?sqldf\n\n# Compute recency, frequency, and average purchase amount\ncustomers = sqldf(\"SELECT customer_id,\n                          MIN(days_since) AS 'recency',\n                          COUNT(*) AS 'frequency',\n                          AVG(purchase_amount) AS 'amount'\n                   FROM data GROUP BY 1\")\n\n# Explore the data\nhead(customers)\nsummary(customers)\nhist(customers$recency)\nhist(customers$frequency)\nhist(customers$amount)\nhist(customers$amount, breaks = 100)\n\n\n# Jerome’s notes ----------------------------------------------------------\n# 2 key takeaways applicable to transformation of the data\n\n# 1: In order to compare different metrics that are on different scales of\n# measurement e.g. days, units and £value need to standardise so that they are\n# displayed on roughly the same scale\n# Standardise by: (data point - mean) / standard deviation\n# leaves data on a comparable scale of -2 to 2 roughly\n\n# 2: And this is the new one. Statistically speaking the difference between\n# a purchases of £5 and £15 and one of £310 and £320 would be the same. However\n# to the business, they are not equivalent - particularly with the skewed right\n#  data set, the two customers at £300+ can be grouped together but actually\n#  because of the frequency, the ones at £5 and £15 could be very different\n#  This is what you use the log transformation for - to transform the\n#  distribution so that there is a more even spread and clearer differences can\n#  be made when the data is bunched up and conversely data points that are\n#  sparse can be brought closer together.\n\n# The transformation code below contains functions to do so\n# (it's pretty simple!)\n# scale(data)\n# log(data)\n\n# --- PREPARING AND TRANSFORMING DATA ----------------------\n\n\n# Copy customer data into new data frame\nnew_data = customers\n\n# Remove customer id as a variable, store it as row names\nhead(new_data)\nrow.names(new_data) = new_data$customer_id\nnew_data$customer_id = NULL\nhead(new_data)\n\n# Take the log-transform of the amount, and plot\nnew_data$amount = log(new_data$amount)\n\n# hwk answer 1 ------------------------------------------------------------\nnew_data$frequency <- log(new_data$frequency)\nhist(new_data$amount)\nhist(new_data$frequency)\n\n# Standardize variables\nnew_data = scale(new_data)\nhead(new_data)\n\n\n# --- RUNNING A HIERARCHICAL SEGMENTATION ------------------\n\n\n# Compute distance metrics on standardized data\n# This will likely generate an error on most machines\n# d = dist(new_data)\n\n# Take a 10% sample\nsample = seq(1, 18417, by = 10)\nhead(sample)\ncustomers_sample = customers[sample, ]\nnew_data_sample  = new_data[sample, ]\n\n# Compute distance metrics on standardized data\nd = dist(new_data_sample)\n\n# Perform hierarchical clustering on distance metrics\nc = hclust(d, method=\"ward.D2\")\n\n# Plot de dendogram\nplot(c)\n\n# Cut at 9 segments\n#members = cutree(c, k = 9)\n# hwk answer 2 ------------------------------------------------------------\nmembers = cutree(c, k = 5)\n\n# Show 30 first customers, frequency table\nmembers[1:30]\ntable(members)\n\n# Show profile of each segment\naggregate(customers_sample[, 2:4], by = list(members), mean)\n\nsummary(members)\nmembers[260]\nmembers[5920]\n\n\n",
    "created" : 1496499332336.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3926154322",
    "id" : "10673197",
    "lastKnownWriteTime" : 1496850199,
    "last_content_update" : 1496850199945,
    "path" : "~/Documents/DataScience/courses/ESSEC_SBA/Marketing_Analytics/module1-hwk1.r",
    "project_path" : "module1-hwk1.r",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}